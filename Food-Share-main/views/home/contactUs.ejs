<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Contact Us</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>

  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(to right, #fff8e7, #fff4cc);
      min-height: 100vh;
    }

    .form-section {
      margin: 50px auto;
      padding: 30px;
      background: #ffffffcc;
      max-width: 600px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
      backdrop-filter: blur(6px);
    }

    .form-section h2 {
      color: #ffbb00;
      margin-bottom: 25px;
    }

    .form-control:focus {
      border-color: #ffb300;
      box-shadow: 0 0 8px rgba(255,179,0,0.4);
    }

    .btn-primary {
      background-color: #ffaa00;
      border: none;
    }

    .btn-primary:hover {
      background-color: #b38900;
    }

    footer {
      background: #fffbe0;
      padding: 1rem 0;
    }

    /* Chatbot Styles */
    .chatbot-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 350px;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: none;
      transition: all 0.4s ease-in-out;
      transform: translateY(100%);
      z-index: 1000;
    }

    .chatbot-container.active {
      display: block;
      transform: translateY(0);
    }

    .chatbot-header {
      background: #ffb300;
      color: #fff;
      padding: 10px;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .chatbot-header img {
      margin-right: 8px;
    }

    .chatbot-body {
      padding: 10px;
      height: 300px;
      overflow-y: auto;
      border-bottom: 1px solid #ddd;
    }

    .chatbot-footer {
      padding: 10px;
    }

    .chatbot-footer input {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    .chatbot-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #ffc800;
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 999;
    }

    .message {
      margin-bottom: 10px;
    }

    .user-message {
      text-align: right;
    }

    .bot-message {
      text-align: left;
    }

    .message p {
      display: inline-block;
      padding: 8px 12px;
      border-radius: 10px;
      max-width: 80%;
    }

    .user-message p {
      background: #007BFF;
      color: #fff;
    }

    .bot-message p {
      background: #f1f1f1;
      color: #333;
    }
  </style>
</head>

<body>

  <!-- Contact Form Section -->
  <section>
    <div class="form-section">
      <div class="text-center mb-3">
        <img src="https://img.icons8.com/fluency/48/help.png" alt="Help Icon"/>
      </div>
      <h2 class="text-center">Have a Question? Get in Touch!</h2>
      <form action="https://formspree.io/f/xnnjwpgr" method="POST">
        <div class="form-floating mb-3">
          <input type="text" class="form-control" id="name" placeholder="Name" name="name" required>
          <label for="name">Name</label>
        </div>
        <div class="form-floating mb-3">
          <input type="email" class="form-control" id="email" placeholder="Email" name="email" required>
          <label for="email">Email Address</label>
        </div>
        <div class="form-floating mb-3">
          <textarea class="form-control" id="question" name="message" placeholder="Your Question" style="height: 150px;" required></textarea>
          <label for="question">Your Question</label>
        </div>
        <button type="submit" class="btn btn-primary w-100">Submit</button>
      </form>
    </div>
  </section>

  <!-- Chatbot Toggle Button -->
  <button class="chatbot-toggle" onclick="toggleChatbot()">ðŸ’¬</button>

  <!-- Chatbot Container -->
  <div class="chatbot-container" id="chatbotContainer">
    <div class="chatbot-header">
      <img src="https://img.icons8.com/color/36/chatbot.png" alt="Bot" />
      <strong>Bite Talks</strong>
    </div>
    <div class="chatbot-body" id="chatbotBody"></div>
    <div class="chatbot-footer">
      <input type="text" id="userInput" placeholder="Type your message..." onkeypress="handleKeyPress(event)">
    </div>
  </div>

  <!-- Footer -->
  <footer class="text-center">
    <small>&copy; 2025 Bite Talks. All rights reserved. | <a href="mailto:support@bitetalks.com">Email Us</a></small>
  </footer>

  <!-- JavaScript -->
  <script>
    function toggleChatbot() {
      const chatbotContainer = document.getElementById('chatbotContainer');
      chatbotContainer.classList.toggle('active');
    }

    async function handleKeyPress(event) {
      if (event.key === 'Enter') {
        const userInput = document.getElementById('userInput');
        const userMessage = userInput.value.trim();
        if (userMessage) {
          displayMessage(userMessage, 'user');
          userInput.value = '';
          const botResponse = await getBotResponse(userMessage);
          displayMessage(botResponse, 'bot');
        }
      }
    }

    function displayMessage(message, sender) {
      const chatbotBody = document.getElementById('chatbotBody');
      const messageElement = document.createElement('div');
      messageElement.classList.add('message', `${sender}-message`);
      messageElement.innerHTML = `<p>${message}</p>`;
      chatbotBody.appendChild(messageElement);
      chatbotBody.scrollTop = chatbotBody.scrollHeight;
    }

    async function getBotResponse(userMessage) {
      const apiKey = 'YOUR_GEMINI_API_KEY'; // Replace with your actual key
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
      try {
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            contents: [{ parts: [{ text: userMessage }] }]
          })
        });

        const data = await response.json();
        if (data.candidates && data.candidates.length > 0) {
          return data.candidates[0].content.parts[0].text;
        } else {
          return 'Sorry, I could not generate a response.';
        }
      } catch (error) {
        console.error('Error:', error);
        return 'Sorry, I am unable to respond at the moment.';
      }
    }
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
